<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\zzz.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\zzz.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Oct 17 13:10:33 2023
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; USART_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">FlashInt</a> from myeeprom.o(i.FlashInt) referenced from myeeprom.o(i.EEPROM_init)
 <LI><a href="#[2d]">FlashInt</a> from myeeprom.o(i.FlashInt) referenced from myeeprom.o(i.EEPROM_writeparameters)
 <LI><a href="#[7]">HardFault_Handler</a> from interrupts_hc32l136.o(i.HardFault_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[b]">IRQ000_Handler</a> from interrupts_hc32l136.o(i.IRQ000_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[c]">IRQ001_Handler</a> from interrupts_hc32l136.o(i.IRQ001_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[d]">IRQ002_Handler</a> from interrupts_hc32l136.o(i.IRQ002_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[e]">IRQ003_Handler</a> from mygpio.o(i.IRQ003_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[f]">IRQ004_Handler</a> from interrupts_hc32l136.o(i.IRQ004_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[10]">IRQ005_Handler</a> from interrupts_hc32l136.o(i.IRQ005_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[11]">IRQ006_Handler</a> from myuart.o(i.IRQ006_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[12]">IRQ007_Handler</a> from interrupts_hc32l136.o(i.IRQ007_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[13]">IRQ008_Handler</a> from interrupts_hc32l136.o(i.IRQ008_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[14]">IRQ009_Handler</a> from interrupts_hc32l136.o(i.IRQ009_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[15]">IRQ010_Handler</a> from interrupts_hc32l136.o(i.IRQ010_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[16]">IRQ011_Handler</a> from interrupts_hc32l136.o(i.IRQ011_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[17]">IRQ012_Handler</a> from interrupts_hc32l136.o(i.IRQ012_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[18]">IRQ013_Handler</a> from interrupts_hc32l136.o(i.IRQ013_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[19]">IRQ014_Handler</a> from mytimers.o(i.IRQ014_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1a]">IRQ015_Handler</a> from interrupts_hc32l136.o(i.IRQ015_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1b]">IRQ016_Handler</a> from interrupts_hc32l136.o(i.IRQ016_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1c]">IRQ017_Handler</a> from interrupts_hc32l136.o(i.IRQ017_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1d]">IRQ018_Handler</a> from interrupts_hc32l136.o(i.IRQ018_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1e]">IRQ019_Handler</a> from interrupts_hc32l136.o(i.IRQ019_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1f]">IRQ020_Handler</a> from interrupts_hc32l136.o(i.IRQ020_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[20]">IRQ021_Handler</a> from interrupts_hc32l136.o(i.IRQ021_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[21]">IRQ022_Handler</a> from interrupts_hc32l136.o(i.IRQ022_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[22]">IRQ023_Handler</a> from interrupts_hc32l136.o(i.IRQ023_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[23]">IRQ024_Handler</a> from interrupts_hc32l136.o(i.IRQ024_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[24]">IRQ025_Handler</a> from interrupts_hc32l136.o(i.IRQ025_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[25]">IRQ026_Handler</a> from interrupts_hc32l136.o(i.IRQ026_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[26]">IRQ027_Handler</a> from interrupts_hc32l136.o(i.IRQ027_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[27]">IRQ028_Handler</a> from interrupts_hc32l136.o(i.IRQ028_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[28]">IRQ029_Handler</a> from interrupts_hc32l136.o(i.IRQ029_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[29]">IRQ030_Handler</a> from interrupts_hc32l136.o(i.IRQ030_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2a]">IRQ031_Handler</a> from interrupts_hc32l136.o(i.IRQ031_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_hc32l136.o(i.SystemInit) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[2e]">__main</a> from __main.o(!!!main) referenced from startup_hc32l136.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[31]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[36]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[dc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[de]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[df]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[f2]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[f3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[f4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[f5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[f6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[f8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[30]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[f9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[33]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[35]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[fa]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[37]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; USART_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fb]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[fc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l136.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fe]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert8
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setdeviation
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setbitrate
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
</UL>

<P><STRONG><a name="[101]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[106]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[107]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[60]"></a>Bt_GetIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[ca]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bt.o(i.Bt_M0_ARRSet))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[cb]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bt.o(i.Bt_M0_Cnt16Set))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[cd]"></a>Bt_M0_Run</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bt.o(i.Bt_M0_Run))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[cc]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bt.o(i.Bt_Mode0_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[c9]"></a>Bt_Mode0_Init</STRONG> (Thumb, 378 bytes, Stack size 20 bytes, bt.o(i.Bt_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
</UL>

<P><STRONG><a name="[42]"></a>DE_Off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myuart.o(i.DE_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DE_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[44]"></a>DE_On</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myuart.o(i.DE_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DE_On
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
</UL>

<P><STRONG><a name="[46]"></a>DIO0_disableIRQ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mygpio.o(i.DIO0_disableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DIO0_disableIRQ &rArr; Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
</UL>

<P><STRONG><a name="[48]"></a>DIO0_enableIRQ</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mygpio.o(i.DIO0_enableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DIO0_enableIRQ &rArr; Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
</UL>

<P><STRONG><a name="[4a]"></a>EEPROM_init</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, myeeprom.o(i.EEPROM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROM_init &rArr; write_eeprom_word &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_word
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_halfw
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>EEPROM_readparameters</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, myeeprom.o(i.EEPROM_readparameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EEPROM_readparameters
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>EEPROM_writeparameters</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, myeeprom.o(i.EEPROM_writeparameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROM_writeparameters &rArr; write_eeprom_word &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_word
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_halfw
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[93]"></a>EnableNvic</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, interrupts_hc32l136.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
</UL>

<P><STRONG><a name="[2d]"></a>FlashInt</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myeeprom.o(i.FlashInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FlashInt &rArr; Flash_DisableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetIntFlag
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DisableIrq
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ClearIntFlag
</UL>
<BR>[Address Reference Count : 2]<UL><LI> myeeprom.o(i.EEPROM_writeparameters)
<LI> myeeprom.o(i.EEPROM_init)
</UL>
<P><STRONG><a name="[51]"></a>Flash_ClearIntFlag</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flash.o(i.Flash_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[52]"></a>Flash_DisableIrq</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, flash.o(i.Flash_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[50]"></a>Flash_GetIntFlag</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, flash.o(i.Flash_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[4b]"></a>Flash_Init</STRONG> (Thumb, 446 bytes, Stack size 20 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_writeparameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
</UL>

<P><STRONG><a name="[4c]"></a>Flash_SectorErase</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Flash_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_writeparameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
</UL>

<P><STRONG><a name="[d7]"></a>Flash_WriteHalfWord</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, flash.o(i.Flash_WriteHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_halfw
</UL>

<P><STRONG><a name="[d8]"></a>Flash_WriteWord</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, flash.o(i.Flash_WriteWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eeprom_word
</UL>

<P><STRONG><a name="[58]"></a>Gpio_ClearIrq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
</UL>

<P><STRONG><a name="[43]"></a>Gpio_ClrIO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_Off
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_HWreset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Off
</UL>

<P><STRONG><a name="[47]"></a>Gpio_DisableIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.Gpio_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_DisableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_disableIRQ
</UL>

<P><STRONG><a name="[49]"></a>Gpio_EnableIrq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_enableIRQ
</UL>

<P><STRONG><a name="[bd]"></a>Gpio_GetInputIO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_keys
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDIO0
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetIrqStatus))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
</UL>

<P><STRONG><a name="[65]"></a>Gpio_Init</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_HWreset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[ac]"></a>Gpio_SetAfMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetAfMode))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[45]"></a>Gpio_SetIO</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_On
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_HWreset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_On
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_On
</UL>

<P><STRONG><a name="[54]"></a>Green_Off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mygpio.o(i.Green_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Green_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
</UL>

<P><STRONG><a name="[55]"></a>Green_On</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mygpio.o(i.Green_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Green_On
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ003_Handler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mygpio.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ004_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ005_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ006_Handler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, myuart.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ006_Handler &rArr; cbUSART1_RXtestirq &rArr; Uart_ClrStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrIsr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXirq
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_Off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ014_Handler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mytimers.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ014_Handler &rArr; check_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_keys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RF69_HWreset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, myspi.o(i.RF69_HWreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RF69_HWreset &rArr; Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[67]"></a>RF69_calctemp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfm69.o(i.RF69_calctemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_tempmeas
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
</UL>

<P><STRONG><a name="[6a]"></a>RF69_clearFIFO</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_clearFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_clearFIFO &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[6c]"></a>RF69_deselect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myspi.o(i.RF69_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF69_deselect
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>

<P><STRONG><a name="[6e]"></a>RF69_getRSSI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_getRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF69_getRSSI &rArr; RF69_readreg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[70]"></a>RF69_getversion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfm69.o(i.RF69_getversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF69_getversion &rArr; RF69_readreg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[71]"></a>RF69_init</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, rfm69.o(i.RF69_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF69_init &rArr; RF69_restartRX &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_HWreset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setNodeAddr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setpower
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setmodulation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setdeviation
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setbitrate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setSyncValue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setSyncConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRXtimeouts
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRXBW
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRSSItr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPreambleSize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPayLen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPacketConfig2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPacketConfig1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPAramp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setLNAgain
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setBrAddr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFClowbeta
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFCBW
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFC
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[6f]"></a>RF69_readreg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfm69.o(i.RF69_readreg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF69_readreg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_select
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_getRSSI
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_tempmeas
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_getversion
</UL>

<P><STRONG><a name="[87]"></a>RF69_restartRX</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rfm69.o(i.RF69_restartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF69_restartRX &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_clearFIFO
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_startRSSI
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPacketConfig2
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setDIOmapping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_calctemp
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[88]"></a>RF69_select</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myspi.o(i.RF69_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF69_select
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>

<P><STRONG><a name="[8c]"></a>RF69_sendpacket</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rfm69.o(i.RF69_sendpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF69_sendpacket &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkDIO0
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_clearFIFO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_calctemp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
</UL>

<P><STRONG><a name="[7b]"></a>RF69_setAFC</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setAFC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setAFC &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[7a]"></a>RF69_setAFCBW</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setAFCBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setAFCBW &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[7c]"></a>RF69_setAFClowbeta</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setAFClowbeta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setAFClowbeta &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[86]"></a>RF69_setBrAddr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setBrAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setBrAddr &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[8a]"></a>RF69_setDIOmapping</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setDIOmapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setDIOmapping &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
</UL>

<P><STRONG><a name="[78]"></a>RF69_setLNAgain</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setLNAgain))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setLNAgain &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[85]"></a>RF69_setNodeAddr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setNodeAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setNodeAddr &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[77]"></a>RF69_setPAramp</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setPAramp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setPAramp &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[83]"></a>RF69_setPacketConfig1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setPacketConfig1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setPacketConfig1 &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[84]"></a>RF69_setPacketConfig2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setPacketConfig2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setPacketConfig2 &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[82]"></a>RF69_setPayLen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setPayLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setPayLen &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[7f]"></a>RF69_setPreambleSize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setPreambleSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setPreambleSize &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[7d]"></a>RF69_setRSSItr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setRSSItr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setRSSItr &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[79]"></a>RF69_setRXBW</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setRXBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setRXBW &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[7e]"></a>RF69_setRXtimeouts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setRXtimeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setRXtimeouts &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[80]"></a>RF69_setSyncConfig</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setSyncConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setSyncConfig &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[81]"></a>RF69_setSyncValue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rfm69.o(i.RF69_setSyncValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF69_setSyncValue &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[72]"></a>RF69_setbitrate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setbitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setbitrate &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[69]"></a>RF69_setchannel</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rfm69.o(i.RF69_setchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_calctemp
</UL>

<P><STRONG><a name="[74]"></a>RF69_setdeviation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setdeviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setdeviation &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
</UL>

<P><STRONG><a name="[73]"></a>RF69_setmodulation</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setmodulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setmodulation &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[75]"></a>RF69_setopmode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setopmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setopmode &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[76]"></a>RF69_setpower</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rfm69.o(i.RF69_setpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_setpower &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[8b]"></a>RF69_startRSSI</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfm69.o(i.RF69_startRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_startRSSI &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
</UL>

<P><STRONG><a name="[68]"></a>RF69_tempmeas</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rfm69.o(i.RF69_tempmeas))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF69_tempmeas &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_calctemp
</UL>

<P><STRONG><a name="[6b]"></a>RF69_writereg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rfm69.o(i.RF69_writereg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_select
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setNodeAddr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_clearFIFO
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_tempmeas
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_startRSSI
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setpower
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setmodulation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setdeviation
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setbitrate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setSyncValue
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setSyncConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRXtimeouts
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRXBW
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setRSSItr
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPreambleSize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPayLen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPacketConfig2
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPacketConfig1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setPAramp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setLNAgain
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setDIOmapping
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setBrAddr
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFClowbeta
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFCBW
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setAFC
</UL>

<P><STRONG><a name="[90]"></a>Red_Off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mygpio.o(i.Red_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Red_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>Red_On</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mygpio.o(i.Red_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Red_On
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>Spi_Init</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, spi.o(i.Spi_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Spi_Init &rArr; EnableNvic
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
</UL>

<P><STRONG><a name="[d6]"></a>Spi_MasterTransfer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, spi.o(i.Spi_MasterTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transfer
</UL>

<P><STRONG><a name="[6d]"></a>Spi_SetCS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.Spi_SetCS))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_select
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_deselect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
</UL>

<P><STRONG><a name="[94]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[a3]"></a>Sysctrl_GetPClkFreq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_GetPClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[9e]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetHCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetHCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[9f]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[9b]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPLLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPLLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[aa]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[a4]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCHTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetRCHTrim &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetRCLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[ce]"></a>Sysctrl_SetRCLTrim</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_SetRCLTrim))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTHStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTHStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[9a]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[9d]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>Sysctrl_XTHDriverConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_XTHDriverConfig))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[99]"></a>Sysctrl_XTLDriverConfig</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, sysctrl.o(i.Sysctrl_XTLDriverConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sysctrl_XTLDriverConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[a5]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>UART_senddata</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, main.o(i.UART_senddata))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_senddata &rArr; USART_SendBlock &rArr; Uart_EnableIrq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_On
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Off
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[a8]"></a>USART_SendBlock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, myuart.o(i.USART_SendBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_SendBlock &rArr; Uart_EnableIrq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_On
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtuningresponse
</UL>

<P><STRONG><a name="[a9]"></a>USART_init</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, myuart.o(i.USART_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMMDOrCk
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetClkDiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaud
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_Off
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Uart_ClrIsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(i.Uart_ClrIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_ClrIsr &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[5b]"></a>Uart_ClrStatus</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, uart.o(i.Uart_ClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_ClrStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXirq
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
</UL>

<P><STRONG><a name="[5c]"></a>Uart_DisableIrq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, uart.o(i.Uart_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_DisableIrq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
</UL>

<P><STRONG><a name="[b1]"></a>Uart_EnableFunc</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, uart.o(i.Uart_EnableFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_EnableFunc &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[5d]"></a>Uart_EnableIrq</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, uart.o(i.Uart_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_EnableIrq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
</UL>

<P><STRONG><a name="[59]"></a>Uart_GetStatus</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart.o(i.Uart_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Uart_GetStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[ae]"></a>Uart_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, uart.o(i.Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Uart_Init &rArr; Uart_SetStopBit &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetStopBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[b0]"></a>Uart_SetBaud</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(i.Uart_SetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetBaud &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[af]"></a>Uart_SetClkDiv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, uart.o(i.Uart_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetClkDiv &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[ad]"></a>Uart_SetMMDOrCk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.Uart_SetMMDOrCk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetMMDOrCk &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[b3]"></a>Uart_SetMode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.Uart_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[b5]"></a>Uart_SetMultiMode</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(i.Uart_SetMultiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetMultiMode &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[b4]"></a>Uart_SetStopBit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uart.o(i.Uart_SetStopBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart_SetStopBit &rArr; UartGetInternDataPtr
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[95]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, testmode.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[5f]"></a>cbUSART1_RXirq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, myuart.o(i.cbUSART1_RXirq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cbUSART1_RXirq &rArr; Uart_ClrStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[5e]"></a>cbUSART1_RXtestirq</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, testmode.o(i.cbUSART1_RXtestirq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cbUSART1_RXtestirq &rArr; Uart_ClrStatus &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_param
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_headL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_headH
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_command
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nocommand
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[8d]"></a>checkDIO0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, myspi.o(i.checkDIO0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkDIO0
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
</UL>

<P><STRONG><a name="[62]"></a>check_keys</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, mytimers.o(i.check_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_keys
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[be]"></a>checkpacket</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, testmode.o(i.checkpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = checkpacket &rArr; comp_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_crc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
</UL>

<P><STRONG><a name="[c0]"></a>clearRxBuff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, testmode.o(i.clearRxBuff))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_command
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nocommand
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpacket
</UL>

<P><STRONG><a name="[c1]"></a>compTxCRC</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, testmode.o(i.compTxCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = compTxCRC &rArr; comp_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtuningresponse
</UL>

<P><STRONG><a name="[bf]"></a>comp_crc</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, testmode.o(i.comp_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = comp_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compTxCRC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpacket
</UL>

<P><STRONG><a name="[c2]"></a>convert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = convert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
</UL>

<P><STRONG><a name="[a7]"></a>convert8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.convert8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = convert8
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
</UL>

<P><STRONG><a name="[ab]"></a>ddl_memclr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
</UL>

<P><STRONG><a name="[66]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mytimers.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_HWreset
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
</UL>

<P><STRONG><a name="[c3]"></a>handlecommand</STRONG> (Thumb, 724 bytes, Stack size 24 bytes, uart_commands.o(i.handlecommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handlecommand &rArr; RF69_init &rArr; RF69_restartRX &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_writeparameters
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtuningresponse
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOK
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_tempmeas
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setpower
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setmodulation
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_getversion
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
</UL>

<P><STRONG><a name="[c6]"></a>initIO</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, mygpio.o(i.initIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initIO &rArr; DIO0_enableIRQ &rArr; Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Off
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_enableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>initSPI</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, myspi.o(i.initSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initSPI &rArr; Spi_Init &rArr; EnableNvic
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetCS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAfMode
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>initTIM0</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, mytimers.o(i.initTIM0))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = initTIM0 &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetPClkFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main &rArr; USART_init &rArr; Sysctrl_GetPClkFreq &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_loop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTIM0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSPI
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLTrim
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_On
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setchannel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_On
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Green_Off
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_readparameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bc]"></a>nocommand</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, testmode.o(i.nocommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nocommand
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_headL
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_headH
</UL>

<P><STRONG><a name="[ba]"></a>rec_command</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, testmode.o(i.rec_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rec_command
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
</UL>

<P><STRONG><a name="[b8]"></a>rec_headH</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testmode.o(i.rec_headH))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rec_headH &rArr; nocommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nocommand
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
</UL>

<P><STRONG><a name="[b9]"></a>rec_headL</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, testmode.o(i.rec_headL))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rec_headL &rArr; nocommand
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nocommand
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
</UL>

<P><STRONG><a name="[bb]"></a>rec_param</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, testmode.o(i.rec_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rec_param
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbUSART1_RXtestirq
</UL>

<P><STRONG><a name="[c5]"></a>sendOK</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_commands.o(i.sendOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sendOK &rArr; sendtuningresponse &rArr; compTxCRC &rArr; comp_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtuningresponse
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[d2]"></a>sendanswerpacket</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, main.o(i.sendanswerpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sendanswerpacket &rArr; RF69_sendpacket &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_On
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert8
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[d5]"></a>sendtestpacket</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, main.o(i.sendtestpacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sendtestpacket &rArr; RF69_sendpacket &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_On
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_sendpacket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
</UL>

<P><STRONG><a name="[c4]"></a>sendtuningresponse</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart_commands.o(i.sendtuningresponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sendtuningresponse &rArr; compTxCRC &rArr; comp_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compTxCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOK
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
</UL>

<P><STRONG><a name="[89]"></a>spi_transfer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, myspi.o(i.spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_MasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
</UL>

<P><STRONG><a name="[d4]"></a>switch_to_rx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.switch_to_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = switch_to_rx &rArr; RF69_setopmode &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_Off
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_enableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
</UL>

<P><STRONG><a name="[d3]"></a>switch_to_tx</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.switch_to_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = switch_to_tx &rArr; RF69_setopmode &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_writereg
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_disableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_loop
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
</UL>

<P><STRONG><a name="[d1]"></a>test_loop</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, testmode.o(i.test_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = test_loop &rArr; handlecommand &rArr; RF69_init &rArr; RF69_restartRX &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Red_On
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setopmode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handlecommand
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearRxBuff
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkpacket
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_calctemp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>user_loop</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, main.o(i.user_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = user_loop &rArr; sendtestpacket &rArr; RF69_sendpacket &rArr; RF69_calctemp &rArr; RF69_setchannel &rArr; RF69_writereg &rArr; spi_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_setNodeAddr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_restartRX
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_readreg
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_getRSSI
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF69_clearFIFO
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_to_rx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendtestpacket
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendanswerpacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_senddata
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>write_eeprom_halfw</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, myeeprom.o(i.write_eeprom_halfw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_eeprom_halfw &rArr; Flash_WriteHalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_writeparameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
</UL>

<P><STRONG><a name="[4d]"></a>write_eeprom_word</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, myeeprom.o(i.write_eeprom_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_eeprom_word &rArr; Flash_WriteWord
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_writeparameters
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[53]"></a>_GpioEnableIrq</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gpio.o(i._GpioEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_DisableIrq
</UL>

<P><STRONG><a name="[a0]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
</UL>

<P><STRONG><a name="[b2]"></a>UartGetInternDataPtr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(i.UartGetInternDataPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartGetInternDataPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMMDOrCk
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetClkDiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetBaud
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_GetStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_EnableFunc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_DisableIrq
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrStatus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_ClrIsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetStopBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMultiMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_SetMode
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[56]"></a>Gpio_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[63]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
</UL>

<P><STRONG><a name="[40]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
